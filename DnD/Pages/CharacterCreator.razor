@page "/creator/character"
@attribute [Authorize(Roles = "standard")]

@using DnD.Entities
@inject ICharacterRepository CharacterRepo
@inject AuthenticationStateProvider Auth

<h1>Character creator</h1>

<p>This component allows you to create new characters for the party.</p>

<EditForm Model="data" OnValidSubmit="CreateCharacter">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="data.CharacterName" />
    <span>Name of the Character</span>
    <br />
    <br />

    <InputSelect @bind-Value="data.Class">
        @foreach (var c in Enum.GetNames(typeof(CharacterClass)))
        {
            <option value="@c">@c</option>
        }
    </InputSelect>
    <span>Class</span>
    <br />
    <br />

    <InputNumber @bind-Value="data.Level" />
    <span>Level</span>
    <br />
    <br />

    <InputNumber @bind-Value="data.Gold" />
    <span>Gold</span>
    <br />
    <br />

    <InputNumber @bind-Value="data.InitiativeBonus" />
    <span>Initiative bonus</span>
    <br />
    <br />

    <InputNumber @bind-Value="data.PassivePerception" />
    <span>Passive perception </span>
    <br />
    <br />

    <InputNumber @bind-Value="data.PassiveInsight" />
    <span>Passive insight</span>
    <br />
    <br />

    <InputNumber @bind-Value="data.Hp" />
    <span>Hp</span>
    <br />
    <br />
    
    <InputText @bind-Value="data.PlayerName" />
    <span>Name of the player </span>
    <br />
    <br />


    <button class="btn btn-primary" style="background-color: #49a078; border: 0px; border-color: dce1de" type="submit">Create Character</button>

</EditForm>


@code {

    public class FormData
    {
        /// <summary>Name of the Character</summary>
        public string CharacterName { get; set; }

        /// <summary>Class of the Character</summary>
        public CharacterClass Class { get; set; }

        /// <summary>Level of the Character</summary>
        public int Level { get; set; }

        /// <summary>Name of the Player</summary>
        public string PlayerName { get; set; }

        /// <summary>The amount of Gold the character is carrying</summary>
        public int Gold { get; set; }

        /// <summary>Initiative bonus of the character, in case they trust you to roll their initiative</summary>
        public int InitiativeBonus { get; set; }

        /// <summary>Passive perception of the character</summary>
        public int PassivePerception { get; set; }

        /// <summary>Passive insight of the character</summary>
        public int PassiveInsight { get; set; }

        /// <summary>Health points of the character, helpful if you want to cast sleep or other spells</summary>
        public int Hp { get; set; }
    }

    private FormData data = new FormData();

    //Creates a Character with stats and no inventory, then saves it to the repository
    public async Task CreateCharacter()
    {
        var user = await ((MyAuthenticationStateProvider)Auth).GetCurrentUser();

        Character character = new Character
        {
            CharacterName = data.CharacterName,
            Class = data.Class,
            Level = data.Level,
            PlayerName = data.PlayerName,
            Owner = new CharacterUser { UserId = user.Id },
            Gold = data.Gold,
            InitiativeBonus = data.InitiativeBonus,
            PassivePerception = data.PassivePerception,
            PassiveInsight = data.PassiveInsight,
            Hp = data.Hp,
            Playing = false
        };

        await CharacterRepo.Create(character);
        await js.Alert("character created and added to database");
    }
}