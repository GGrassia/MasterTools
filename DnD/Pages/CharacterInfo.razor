@page "/CharacterInfo"
@attribute [Authorize(Roles = "standard")]

@using DnD.Entities;
@inject ICharacterRepository CharacterRepo
@inject IItemRepository ItemRepo 
@inject AuthenticationStateProvider Auth

<h1>Here you'll find all the details of a single character and his inventory</h1>
<h2>Select the character you want info about</h2>
<EditForm Model="this">
<InputSelect TValue="Character" @bind-Value="@selectedCharacter">
        @foreach (Character c in characters)
        {
            <option value="@c">@c.CharacterName</option>
        }

</InputSelect>
</EditForm>

@if (selectedCharacter != null)
{
    <br>
    <div class="card text-white mb-3" style="margin: 15px; background-color: rgba(28, 108, 185, 0.69); backdrop-filter: blur(2px); border-radius: 25px;">
            <div class="card-body">
                <span style="margin: auto; font-size: auto;">Name: </span><input type="text" @bind="selectedCharacter.CharacterName">
                <h3>Class: </h3>
                <select @bind="selectedCharacter.Class">
                    @foreach (var c in Enum.GetNames(typeof(classes)))
                    {
                        <option value="@c">@c</option>
                    }
                </select>
                <span class="character level">Level: @selectedCharacter.Level</span>
                <h5>HP:<input type="number" min="1" max="999" @bind="selectedCharacter.Hp"></h5>
                <h6 class="character initiative">Initiative bonus: @selectedCharacter.InitiativeBonus</h6>
                <h6 class="character passive perception">Passive perception: @selectedCharacter.PassivePerception</h6>
                <h6 class="character passive insight">Passive insight: @selectedCharacter.PassiveInsight</h6>
                <h6 class="player name">Player name: @selectedCharacter.PlayerName</h6>
                <h5>Gold:<input type="number" min="1" max="999999" @bind="selectedCharacter.Gold"></h5>
                <button type="button" class="btn btn-danger" @onclick="@(async () => await CharacterRemove())">KILL HIM</button>
                <button type="button" data-toggle="button" class="btn btn-success" @onclick="@(async () => await TogglePlaying())">Playing? @selectedCharacter.Playing</button>
            </div>
        </div>
    <span>Pop a quick item?</span><button>Potion</button>
    <table 
    class="table table-striped table-dark"
    style="width:100%; background-color: #1F2421">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Number</th>
                <th scope="col">Type</th>
                <th scope="col">Magic</th>
                <th scope="col">Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in selectedCharacter.Inventory.Select(i => i.Item))
            {
                <tr>
                    <th scope="row">@item.Name</th>
                    <td>@item.Number</td>
                    <td>@item.Type</td>
                    <td>@item.IsMagic</td>
                    <td>@item.Value</td>
                    <td><button type="button" class="btn btn-danger" @onclick="@(async () => await ItemRemove(item))">Remove</button></td>
                </tr>
            }
        </tbody>
    
    </table>
}

@code {

    private enum classes
    {
        Artificer, Barbarian, Bard, Cleric, Druid, Fighter, Monk, Paladin, Ranger, Rogue, Sorcerer, Warlock, Wizard
    }

    private List<Character> characters = new List<Character>();
    private Character selectedCharacter;

    protected override async Task OnInitializedAsync()
    {
        var user = await ((MyAuthenticationStateProvider)Auth).GetCurrentUser();
        characters = await CharacterRepo.GetAll().Where(c => c.Owner.User.Username == user.Username).ToListAsync();
        selectedCharacter = characters.FirstOrDefault();
    }

    private async Task CharacterRemove()
    {
        if (await js.Confirm($"Are you sure you want to kill {selectedCharacter.CharacterName}?"))
        {
            await CharacterRepo.Delete(selectedCharacter);
            characters.Remove(selectedCharacter);
            selectedCharacter = characters.FirstOrDefault();
        }
    }

    private async Task TogglePlaying()
    {
        selectedCharacter.Playing = !selectedCharacter.Playing;
        await CharacterRepo.Update(selectedCharacter);
    }

    private async Task ItemRemove(Item item)
    {
        var toRemove = selectedCharacter.Inventory.First(i => i.Item == item);
        selectedCharacter.Inventory.Remove(toRemove);
        await ItemRepo.Delete(item);
    }

}