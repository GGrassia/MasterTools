@page "/creator/item"

@using LiteDB;
@using DnD.Models;
@using DnD.Entities;
@using System.ComponentModel.DataAnnotations;
@inject ICharacterRepository Repo

<h1>Item creator</h1>

<p>This component allows you to create new items and assign them to party members.</p>

<EditForm Model="data" OnValidSubmit="CreateItem">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputSelect @bind-Value="data.Type">
    @foreach (var c in Enum.GetNames(typeof(itemTypes)))
        {
            <option value="@c">@c</option>
        }
    </InputSelect>
    <span>Weapon, Armor, Consumable, or other</span>
    <br />
    <br />

    <InputNumber @bind-Value="data.Number" />
    <span>Number of the items in possession</span>
    <br />
    <br />

    <InputCheckbox @bind-Value="data.IsMagic" />
    <span>Is it magic?</span>
    <br />
    <br />

    <InputText @bind-Value="data.Name" />
    <span>Name of the item</span>
    <br />
    <br />

    <InputNumber @bind-Value="data.Value" />
    <span>Value for buying new, or for magic purposes </span>
    <br />
    <br />

    <InputTextArea @bind-Value="data.Description" />
    <span>Describe the item's effects, properties or aspect</span>
    <br />
    <br />

    <InputSelect @bind-Value="data.Owner">
        @foreach (var character in characters)
        {
            <option value="@character.CharacterName">@character.CharacterName</option>
        }
    </InputSelect>
    <span>Who's keeping the item</span>
    <br />
    <br />

    <button class="btn btn-primary" style="background-color: #49a078; border: 0px; border-color: dce1de" type="submit">Create Item</button>
</EditForm>

@code {

    public class FormData
    {
        /// <summary>If the item is a weapon, piece of armour, a kit or stuff you've found</summary>
        public string Type { get; set; }

        /// <summary>How many of this item you have in the inventory, specially useful for potions</summary>
        public int Number { get; set; }

        /// <summary>Is the item in question magic or not</summary>
        public bool IsMagic { get; set; }

        /// <summary>The name of the item</summary>
        public string Name { get; set; }

        /// <summary>An indicative sum you would make from selling the item, or the countervalue for a component (IE the diamond dust for stoneskin)</summary>
        public int Value { get; set; }

        /// <summary>Description of the item, it's function or properties, if necessary</summary>
        public string Description { get; set; }

        /// <summary>Name of the character currently keeping or owning the item</summary>
        public string Owner { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        characters = Repo.GetAll().ToList();
    }

    private enum itemTypes
    {
        Weapon, Armor, Tool, Toolkit, Potion, Other
    }
    private List<CharacterEntity> characters = new List<CharacterEntity>();

    private FormData data = new FormData();

    //Creates an Item, assigns it to a character and updates the character data in the database
    public void CreateItem()
    {
        Item oggetto = new Item
        {
            Type = data.Type,
            Number = data.Number,
            IsMagic = data.IsMagic,
            Name = data.Name,
            Value = data.Value,
            Description = data.Description,
            Owner = data.Owner
        };

        try
        {
            Repo.AddItem(oggetto.Owner, oggetto);
            js.Alert("Item created and added to the character's inventory");
        }
        catch (KeyNotFoundException)
        {
            js.Alert("Error, character not found");
        }

    }
}